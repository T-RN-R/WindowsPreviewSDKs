//
// Copyright (c) Microsoft Corporation. All rights reserved.
// 
//
// File generated by WinMDIDL version 8.00.0021
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.ApplicationModel.Core.idl";
import "Windows.Storage.Streams.idl";
import "Windows.UI.StartScreen.idl";
import "Windows.UI.WindowManagement.idl";

// Forward Declare
namespace Windows
{
    namespace ApplicationModel
    {
        namespace Core
        {
            runtimeclass AppListEntry;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        runtimeclass Deferral;

        apicontract UniversalApiContract;

        runtimeclass Uri;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IRandomAccessStreamReference;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace StartScreen
        {
            runtimeclass SecondaryTile;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace WindowManagement
        {
            runtimeclass AppWindow;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Shell
        {
            apicontract SecurityAppManagerContract;

            typedef enum SecurityAppKind SecurityAppKind;

            typedef enum SecurityAppState SecurityAppState;

            typedef enum SecurityAppSubstatus SecurityAppSubstatus;

            interface IAdaptiveCard;

            interface IAdaptiveCardBuilderStatics;

            interface ISecurityAppManager;

            interface ITaskbarManager;

            interface ITaskbarManager2;

            interface ITaskbarManagerStatics;

            interface IWindowTab;

            interface IWindowTabCloseRequestedEventArgs;

            interface IWindowTabCollection;

            interface IWindowTabGroup;

            interface IWindowTabIcon;

            interface IWindowTabIconStatics;

            interface IWindowTabManager;

            interface IWindowTabManagerStatics;

            interface IWindowTabSwitchRequestedEventArgs;

            interface IWindowTabThumbnailRequestedEventArgs;

            runtimeclass AdaptiveCardBuilder;

            runtimeclass SecurityAppManager;

            runtimeclass TaskbarManager;

            runtimeclass WindowTab;

            runtimeclass WindowTabCloseRequestedEventArgs;

            runtimeclass WindowTabCollection;

            runtimeclass WindowTabGroup;

            runtimeclass WindowTabIcon;

            runtimeclass WindowTabManager;

            runtimeclass WindowTabSwitchRequestedEventArgs;

            runtimeclass WindowTabThumbnailRequestedEventArgs;
        }
    }
}

// Generic instantiations
namespace Windows
{
    namespace UI
    {
        namespace Shell
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Shell.WindowTab*>;

                interface Windows.Foundation.Collections.IIterator<Windows.UI.Shell.WindowTab*>;

                interface Windows.Foundation.Collections.IVectorView<Windows.UI.Shell.WindowTab*>;

                interface Windows.Foundation.Collections.IVector<Windows.UI.Shell.WindowTab*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Shell.WindowTabManager*, Windows.UI.Shell.WindowTabCloseRequestedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Shell.WindowTabManager*, Windows.UI.Shell.WindowTabSwitchRequestedEventArgs*>;

                interface Windows.Foundation.TypedEventHandler<Windows.UI.Shell.WindowTabManager*, Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs*>;
            }
        }
    }
}

// Type definition
namespace Windows
{
    namespace UI
    {
        namespace Shell
        {
            [contractversion(1.0)]
            apicontract SecurityAppManagerContract
            {
            }

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            enum SecurityAppKind
            {
                WebProtection = 0
            };

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            enum SecurityAppState
            {
                Disabled = 0,
                Enabled  = 1
            };

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            enum SecurityAppSubstatus
            {
                Undetermined      = 0,
                NoActionNeeded    = 1,
                ActionRecommended = 2,
                ActionNeeded      = 3
            };

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [uuid(72D0568C-A274-41CD-82A8-989D40B9B05E)]
            interface IAdaptiveCard : IInspectable
            {
                HRESULT ToJson([out] [retval] HSTRING* result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [uuid(766D8F08-D3FE-4347-A0BC-B9EA9A6DC28E)]
            interface IAdaptiveCardBuilderStatics : IInspectable
            {
                HRESULT CreateAdaptiveCardFromJson([in] HSTRING value, [out] [retval] Windows.UI.Shell.IAdaptiveCard** result);
            }

            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            [exclusiveto(Windows.UI.Shell.SecurityAppManager)]
            [uuid(96AC500C-AED4-561D-BDE8-953520343A2D)]
            interface ISecurityAppManager : IInspectable
            {
                HRESULT Register([in] Windows.UI.Shell.SecurityAppKind kind, [in] HSTRING displayName, [in] Windows.Foundation.Uri* detailsUri, [in] boolean registerPerUser, [out] [retval] GUID* result);
                HRESULT Unregister([in] Windows.UI.Shell.SecurityAppKind kind, [in] GUID guidRegistration);
                HRESULT UpdateState([in] Windows.UI.Shell.SecurityAppKind kind, [in] GUID guidRegistration, [in] Windows.UI.Shell.SecurityAppState state, [in] Windows.UI.Shell.SecurityAppSubstatus substatus, [in] Windows.Foundation.Uri* detailsUri);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [exclusiveto(Windows.UI.Shell.TaskbarManager)]
            [uuid(87490A19-1AD9-49F4-B2E8-86738DC5AC40)]
            interface ITaskbarManager : IInspectable
            {
                [propget] HRESULT IsSupported([out] [retval] boolean* value);
                [propget] HRESULT IsPinningAllowed([out] [retval] boolean* value);
                HRESULT IsCurrentAppPinnedAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT IsAppListEntryPinnedAsync([in] Windows.ApplicationModel.Core.AppListEntry* appListEntry, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT RequestPinCurrentAppAsync([out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT RequestPinAppListEntryAsync([in] Windows.ApplicationModel.Core.AppListEntry* appListEntry, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            }

            [contract(Windows.Foundation.UniversalApiContract, 7.0)]
            [exclusiveto(Windows.UI.Shell.TaskbarManager)]
            [uuid(79F0A06E-7B02-4911-918C-DEE0BBD20BA4)]
            interface ITaskbarManager2 : IInspectable
                requires
                    Windows.UI.Shell.ITaskbarManager
            {
                HRESULT IsSecondaryTilePinnedAsync([in] HSTRING tileId, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT RequestPinSecondaryTileAsync([in] Windows.UI.StartScreen.SecondaryTile* secondaryTile, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
                HRESULT TryUnpinSecondaryTileAsync([in] HSTRING tileId, [out] [retval] Windows.Foundation.IAsyncOperation<boolean>** operation);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [exclusiveto(Windows.UI.Shell.TaskbarManager)]
            [uuid(DB32AB74-DE52-4FE6-B7B6-95FF9F8395DF)]
            interface ITaskbarManagerStatics : IInspectable
            {
                HRESULT GetDefault([out] [retval] Windows.UI.Shell.TaskbarManager** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTab)]
            [uuid(D12283CD-CA89-5D9D-8156-F8D48B9C32F2)]
            interface IWindowTab : IInspectable
            {
                [propget] HRESULT Tag([out] [retval] IInspectable** value);
                [propput] HRESULT Tag([in] IInspectable* value);
                [propget] HRESULT Title([out] [retval] HSTRING* value);
                [propput] HRESULT Title([in] HSTRING value);
                [propget] HRESULT IsRequestingAttention([out] [retval] boolean* value);
                [propput] HRESULT IsRequestingAttention([in] boolean value);
                [propget] HRESULT IsUnresponsive([out] [retval] boolean* value);
                [propput] HRESULT IsUnresponsive([in] boolean value);
                [propget] HRESULT Icon([out] [retval] Windows.UI.Shell.WindowTabIcon** value);
                [propput] HRESULT Icon([in] Windows.UI.Shell.WindowTabIcon* value);
                [propget] HRESULT TreatAsAppId([out] [retval] HSTRING* value);
                [propput] HRESULT TreatAsAppId([in] HSTRING value);
                [propget] HRESULT TreatAsSecondaryTileId([out] [retval] HSTRING* value);
                [propput] HRESULT TreatAsSecondaryTileId([in] HSTRING value);
                [propget] HRESULT Group([out] [retval] Windows.UI.Shell.WindowTabGroup** value);
                [propput] HRESULT Group([in] Windows.UI.Shell.WindowTabGroup* value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabCloseRequestedEventArgs)]
            [uuid(477282E9-EEC4-5882-9889-2DD64D0F9FB6)]
            interface IWindowTabCloseRequestedEventArgs : IInspectable
            {
                [propget] HRESULT Tab([out] [retval] Windows.UI.Shell.WindowTab** value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabCollection)]
            [uuid(ACCD0D6C-ED07-519A-8C33-17E02E7E9B0F)]
            interface IWindowTabCollection : IInspectable
            {
                HRESULT MoveTab([in] Windows.UI.Shell.WindowTab* tab, [in] UINT32 index);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabGroup)]
            [uuid(9E490279-D59B-574D-8DA2-42AA0812BB3A)]
            interface IWindowTabGroup : IInspectable
            {
                [propget] HRESULT Title([out] [retval] HSTRING* value);
                [propput] HRESULT Title([in] HSTRING value);
                [propget] HRESULT Icon([out] [retval] Windows.UI.Shell.WindowTabIcon** value);
                [propput] HRESULT Icon([in] Windows.UI.Shell.WindowTabIcon* value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabIcon)]
            [uuid(358FE345-AC8D-5EC4-BC73-C7E1A8D96DC4)]
            interface IWindowTabIcon : IInspectable
            {
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabIcon)]
            [uuid(D32F391D-FAC3-51A5-BD6B-B5CD2A8E71CF)]
            interface IWindowTabIconStatics : IInspectable
            {
                [overload("CreateFromFontGlyph")] HRESULT CreateFromFontGlyph([in] HSTRING glyph, [in] HSTRING fontFamily, [out] [retval] Windows.UI.Shell.WindowTabIcon** result);
                [overload("CreateFromFontGlyph")] HRESULT CreateFromFontGlyphWithUri([in] HSTRING glyph, [in] HSTRING fontFamily, [in] Windows.Foundation.Uri* fontUri, [out] [retval] Windows.UI.Shell.WindowTabIcon** result);
                HRESULT CreateFromImage([in] Windows.Storage.Streams.IRandomAccessStreamReference* image, [out] [retval] Windows.UI.Shell.WindowTabIcon** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabManager)]
            [uuid(46905D33-6ADF-5A24-BA7C-3C7668709620)]
            interface IWindowTabManager : IInspectable
            {
                [propget] HRESULT Tabs([out] [retval] Windows.UI.Shell.WindowTabCollection** value);
                HRESULT SetActiveTab([in] Windows.UI.Shell.WindowTab* tab);
                [eventadd] HRESULT TabSwitchRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Shell.WindowTabManager*, Windows.UI.Shell.WindowTabSwitchRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT TabSwitchRequested([in] EventRegistrationToken token);
                [eventadd] HRESULT TabCloseRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Shell.WindowTabManager*, Windows.UI.Shell.WindowTabCloseRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT TabCloseRequested([in] EventRegistrationToken token);
                [eventadd] HRESULT TabThumbnailRequested([in] Windows.Foundation.TypedEventHandler<Windows.UI.Shell.WindowTabManager*, Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs*>* handler, [out] [retval] EventRegistrationToken* token);
                [eventremove] HRESULT TabThumbnailRequested([in] EventRegistrationToken token);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabManager)]
            [uuid(2F667FC5-8253-54F9-B918-88EC2560D9C8)]
            interface IWindowTabManagerStatics : IInspectable
            {
                HRESULT GetForCurrentView([out] [retval] Windows.UI.Shell.WindowTabManager** result);
                HRESULT GetForAppWindow([in] Windows.UI.WindowManagement.AppWindow* appWindow, [out] [retval] Windows.UI.Shell.WindowTabManager** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabSwitchRequestedEventArgs)]
            [uuid(7CBC421A-58A4-568B-A351-F8A947A5AAD8)]
            interface IWindowTabSwitchRequestedEventArgs : IInspectable
            {
                [propget] HRESULT Tab([out] [retval] Windows.UI.Shell.WindowTab** value);
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [exclusiveto(Windows.UI.Shell.WindowTabThumbnailRequestedEventArgs)]
            [uuid(567A78CE-C0AE-59B5-A95C-7A845EB99230)]
            interface IWindowTabThumbnailRequestedEventArgs : IInspectable
            {
                [propget] HRESULT Tab([out] [retval] Windows.UI.Shell.WindowTab** value);
                [propget] HRESULT RequestedSize([out] [retval] UINT32* value);
                [propget] HRESULT Image([out] [retval] Windows.Storage.Streams.IRandomAccessStreamReference** value);
                [propput] HRESULT Image([in] Windows.Storage.Streams.IRandomAccessStreamReference* value);
                HRESULT GetDeferral([out] [retval] Windows.Foundation.Deferral** result);
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.IAdaptiveCardBuilderStatics, Windows.Foundation.UniversalApiContract, 5.0)]
            [threading(both)]
            runtimeclass AdaptiveCardBuilder
            {
            }

            [activatable(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            [contract(Windows.UI.Shell.SecurityAppManagerContract, 1.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass SecurityAppManager
            {
                [default] interface Windows.UI.Shell.ISecurityAppManager;
            }

            [contract(Windows.Foundation.UniversalApiContract, 5.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.ITaskbarManagerStatics, Windows.Foundation.UniversalApiContract, 5.0)]
            [threading(both)]
            runtimeclass TaskbarManager
            {
                [default] interface Windows.UI.Shell.ITaskbarManager;
                [contract(Windows.Foundation.UniversalApiContract, 7.0)] interface Windows.UI.Shell.ITaskbarManager2;
            }

            [activatable(Windows.Foundation.UniversalApiContract, 11.0)]
            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass WindowTab
            {
                [default] interface Windows.UI.Shell.IWindowTab;
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowTabCloseRequestedEventArgs
            {
                [default] interface Windows.UI.Shell.IWindowTabCloseRequestedEventArgs;
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowTabCollection
            {
                [default] interface Windows.UI.Shell.IWindowTabCollection;
                interface Windows.Foundation.Collections.IVector<Windows.UI.Shell.WindowTab*>;
                interface Windows.Foundation.Collections.IIterable<Windows.UI.Shell.WindowTab*>;
            }

            [activatable(Windows.Foundation.UniversalApiContract, 11.0)]
            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            [threading(both)]
            runtimeclass WindowTabGroup
            {
                [default] interface Windows.UI.Shell.IWindowTabGroup;
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.IWindowTabIconStatics, Windows.Foundation.UniversalApiContract, 11.0)]
            [threading(both)]
            runtimeclass WindowTabIcon
            {
                [default] interface Windows.UI.Shell.IWindowTabIcon;
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            [static(Windows.UI.Shell.IWindowTabManagerStatics, Windows.Foundation.UniversalApiContract, 11.0)]
            [threading(both)]
            runtimeclass WindowTabManager
            {
                [default] interface Windows.UI.Shell.IWindowTabManager;
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowTabSwitchRequestedEventArgs
            {
                [default] interface Windows.UI.Shell.IWindowTabSwitchRequestedEventArgs;
            }

            [contract(Windows.Foundation.UniversalApiContract, 11.0)]
            [marshaling_behavior(agile)]
            runtimeclass WindowTabThumbnailRequestedEventArgs
            {
                [default] interface Windows.UI.Shell.IWindowTabThumbnailRequestedEventArgs;
            }
        }
    }
}
